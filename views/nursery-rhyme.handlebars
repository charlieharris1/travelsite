{{#section 'head'}}
	<!-- before we use Handlebars on the client sidewe need to load Handlebars. Here we are using an already available CDN  -->
	<script src="//cdnjs.cloudflare.com/ajax/libs/handlebars.js/1.3.0/handlebars.min.js"></script>

	<!-- next we add in our templates to an exisitng, hidden, HTML element -->
	<script id="nurseryRhymeTemplate" type="text/x-handlebars-template">
		Marry had a little <b>\{{animal}}</b>, its <b>\{{bodyPart}}</b>
		was <b>\{{adjective}}</b> as <b>\{{noun}}</b>.
	</script>
{{/section}}
<!-- adding a couple of buttons. The first renders directly from our Javascript and the second from an Ajax call  -->
<div id="nurseryRhyme">Click a button....</div>
<hr>
<button id="btnNurseryRhyme">Generate nursery rhyme</button>
<button id="btnNurseryRhymeAjax">Generate nursery rhyme from AJAX</button>

{{#section 'jquery'}}
	<!-- before we use the template we have to compile it  -->
	<script>
		$(document).ready(function(){
			// Handlebars.compile takes in a template and returns a function. That function accepts a context object and returns a rendered sting. So once we have compiled our templates, we have reusable template renderers that we call like functions. 
			var nurseryRhymeTemplate = Handlebars.compile(
				$('#nurseryRhymeTemplate').html());
			var $nurseryRhyme = $('#nurseryRhyme');
			// the code to render the template
			$('#btnNurseryRhyme').on('click', function(evt){
				evt.preventDefault();
				$nurseryRhyme.html(nurseryRhymeTemplate({
					animal: 'basilisk',
					bodyPart: 'tail',
					adjective: 'sharp',
					noun: 'a needle'
				}));
			});
			$('#btnNurseryRhymeAjax').on('click', function(evt){
				evt.preventDefault();
				$.ajax('/data/nursery-rhyme', {
					success: function(data){
						$nurseryRhyme.html(nurseryRhymeTemplate(data))
					}
				});
			});
		});	
	</script>
{{/section}}